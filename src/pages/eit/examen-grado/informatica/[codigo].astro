---
import { supabase } from "@/lib/db";
import Layout from "@/layouts/Layout.astro";
import "@/styles/globals.css";
import ramos from "@/data/eit/grado/material.json";
import { MagnifyingGlassIcon } from "@radix-ui/react-icons";
import MaterialCard from "@/components/MCard"

export async function getStaticPaths() {
    const informatica = ramos[0]
    const { material: materialInformatica } = informatica;

    return materialInformatica.map(({ codigo, nombre }) => {
        return {
            params: { codigo, nombre },
        };
    });
}

const { codigo, nombre } = Astro.params;
const searchParam = Astro.url.searchParams.get('search') || '';

const { data, error } = await supabase.storage.from("recursos").list("GRADE/INF/"+codigo, {
    limit: 100,
    offset: 0,
    sortBy: { column: "name", order: "asc" },
});

const recursosBase = await Promise.all(
    data?.map(async (recurso) => {
        const { data: publicUrlData } = await supabase.storage
            .from("recursos")
            .getPublicUrl("GRADE/INF/"+`${codigo}/${recurso.name}`)
        if (error) {
            console.error("Error fetching public URL:", error);
            return { ...recurso, publicUrl: null };
        }
        return { ...recurso, publicUrl: publicUrlData?.publicUrl, codigo };
    }) ?? []
);

const recursos = recursosBase.filter((recurso) => {
    return recurso.name.toLowerCase().includes(searchParam.toLowerCase());
});
---

<Layout title="ePauta">
    <header class="header">
        <h1 class="ramo">
            <a href="/">ePAUTA</a> | <a href="/eit/examen-grado">Examen de Grado</a> | <a href="/eit/examen-grado/informatica/">Inform√°tica</a> <span class="codigo">{codigo}</span>
        </h1>
        
        <form action="" method="get">
          <input 
            type="text" 
            name="search" 
            placeholder="Buscar..." 
            value={searchParam} 
            class="input-search"
          />
          <button type="submit" class="button-search">
            <MagnifyingGlassIcon />
          </button>
        </form>
    </header>
    <div
          style={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fill, minmax(200px, 1fr))",
            gap: "1rem",
          }}
        >
          {recursos &&
            recursos.map((recurso) => (
              <MaterialCard
                material={{
                  nombre: recurso.name,
                  publicUrl: recurso.publicUrl,
                }}
              />
            ))}
        </div>
</Layout>


<style>
    header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
    }

    @media screen and (max-width: 768px) {
        header {
            flex-direction: column;
            gap: 1rem;
        }

        form {
            width: 100%;
        }
        
    }

    form {
        margin-top: 1rem; 
        display:flex; 
        gap:0.5rem;
    }

    .input-search {
        padding:0.5rem; 
        border:1px solid #ccc; 
        border-radius:0.25rem; 
        flex:1;
    }
    .button-search {
        background-color:#fff; 
        color: #ef4444; 
        padding:0.5rem 1rem; 
        border:none; 
        border-radius:0.25rem; 
        cursor:pointer;
    }
    .codigo {
        font-size: 1.5rem;
        background-color: #fff;
        padding: 1px 11px;
        color: #ef4444;
    }
</style>
